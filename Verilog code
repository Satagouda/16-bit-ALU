`timescale 1ns / 1ps

module alu_16bit(
input [15:0] A, B,           // 16-bit Inputs
    input [3:0] ALU_Sel,         // 4-bit control for operation selection
    output reg [15:0] ALU_Result, // 16-bit Output
    output reg CarryOut          // Carry output
    );
   wire [16:0] tmp;
    assign tmp = {1'b0, A} + {1'b0, B};  // Addition with carry detection

    always @(*) begin
        case(ALU_Sel)
            4'b0000: {CarryOut, ALU_Result} = tmp;            // Addition
            4'b0001: ALU_Result = A - B;                      // Subtraction
            4'b0010: ALU_Result = A & B;                      // AND
            4'b0011: ALU_Result = A | B;                      // OR
            4'b0100: ALU_Result = A ^ B;                      // XOR
            4'b0101: ALU_Result = ~(A | B);                   // NOR
            4'b0110: ALU_Result = A << 1;                     // Logical Left Shift
            4'b0111: ALU_Result = A >> 1;                     // Logical Right Shift
            4'b1000: ALU_Result = {A[14:0], A[15]};           // Rotate Left
            4'b1001: ALU_Result = {A[0], A[15:1]};            // Rotate Right
            4'b1010: ALU_Result = (A < B) ? 16'b1 : 16'b0;    // Less Than
            4'b1011: ALU_Result = (A == B) ? 16'b1 : 16'b0;   // Equality Check
            4'b1100: ALU_Result = A;                          // Pass A
            4'b1101: ALU_Result = B;                          // Pass B
            default: ALU_Result = 16'b0;                      // Default case
        endcase
    end 
    
endmodule
